#!/usr/bin/env ruby

# if true, extra (but slower) optimization steps will be run prior to deploying
PRODUCTION = true
USE_GZIP = true # make sure to turn this on for production, or S3 will drop the connection!

require 'net/http'
require 'compass'
require 'animation'

# Compass CSS authoring framework
Compass.add_project_configuration 'compass.rb'
sass_options = Compass.sass_engine_options
sass_options[:load_paths] << "#{Dir.pwd}/content/style"

preprocess do
  # add a new item for scripts
  all_scripts_content = all_scripts.sort_by{|s| s.identifier}.map{|s| s.raw_content}.join("\n")
  items << Nanoc::Item.new(all_scripts_content, {}, '/_scripts/')

  # ... and for styles (only use _main.css since we use SASS to process it)
  all_styles_content = @items.find{ |s| s.identifier == '/style/_main/' }.raw_content
  items << Nanoc::Item.new(all_styles_content, {}, '/_styles/')
end

compile '/favicon/' do
  # no filter for favicon (in the future we may need to gzip it, but nanoc-gzip-filter only works with text files)
end

route '/favicon/' do
  '/favicon.ico'
end

# the main css file is processed by SASS and contains '@import's to the other css files
route '/_styles/' do
  all_styles_combined_filename
end

compile '/_styles/' do
  filter :sass, sass_options.merge(:syntax => :scss)
  filter :yui_compressor, :type => 'css' if PRODUCTION
  filter :gzip_in_memory if USE_GZIP
end

compile '/_scripts/' do
  filter :compress_js_closure if PRODUCTION
  filter :gzip_in_memory if USE_GZIP
end

compile '/images/gravatar*' do
  # no filter needed for the gravatar images
end

route '/images/gravatar*' do
  profile_image_url(item.identifier.end_with?('_retina/'))
end

route '/_scripts/' do
  all_scripts_combined_filename
end

compile %r{/(images|script|style|papers)/*/} do
  # don’t filter or layout images, scripts, papers, or stylesheets other than main.css (which got caught before)
end

route %r{/(script|style)/*/} do
  # don't output scripts or other styles anywhere as we combine them into one file
  nil
end

route '/images/raw_sprites/*' do
  # don't output raw sprites, as those get combined
  nil
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :haml, :format => :html4
    layout 'default'
    filter :minify_html, :externs => all_scripts_with_closure_externs.map {|s| File.absolute_path(s.raw_filename)} if PRODUCTION
    filter :gzip_in_memory if USE_GZIP
  end
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml, :format => :html4
